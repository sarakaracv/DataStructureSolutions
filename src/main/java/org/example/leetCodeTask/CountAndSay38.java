package org.example.leetCodeTask;

import java.util.*;

import static java.util.stream.Collectors.joining;

public class CountAndSay38 {
    public static void main(String[] args) {

    }
    public String countAndSay1(int n) {
        String s = "1";
        while(n>1){
            s = counting(s);
            n--;
        }
        return s;
    }
    public String counting(String s){
        StringBuilder sb = new StringBuilder();
        int count = 1;
        for(int i = 0; i<s.length(); i++){
            while(i<s.length()-1 && s.charAt(i) == s.charAt(i+1)){
                count++;
                i++;}
            sb.append(count);
            sb.append(s.charAt(i));
            count = 1;
        }
        return sb.toString();
    }
    public String countAndSay2(int n) {
        return new String[]{}
                [n - 1];
    }
    public String countAndSay3(int n) {
        if(n == 1) {
            return "1";
        }
        String previous_string = countAndSay3(n - 1);
        StringBuilder new_string = new StringBuilder();
        int curr_count = 1;
        char curr_num = '?';
        for(char num : previous_string.toCharArray()) {
            if(num != curr_num) {
                if(curr_num != '?') {
                    new_string.append(Character.forDigit(curr_count, 10)).append(curr_num);
                }
                curr_count = 1;
                curr_num = num;
            }
            else {
                curr_count++;
            }
        }
        new_string.append(Character.forDigit(curr_count, 10)).append(curr_num);
        return new_string.toString();
    }
    public String countAndSay4(int n) {
        if(n==1)
            return "1";
        String s=countAndSay4(n-1);

        int counter=0;
        StringBuffer sb=new StringBuffer();
        for(int i=0;i<s.length();i++)
        {
            counter++;
            if(i==s.length()-1 || s.charAt(i)!=s.charAt(i+1))
            {
                sb.append(counter).append(s.charAt(i));
                counter=0;
            }
        }
        return sb.toString();
    }
    public String countAndSay5(int n) {
        StringBuilder curr=new StringBuilder("1");
        StringBuilder prev;
        int count;
        char say;
        for (int i=1;i<n;i++){
            prev=curr;
            curr=new StringBuilder();
            count=1;
            say=prev.charAt(0);

            for (int j=1,len=prev.length();j<len;j++){
                if (prev.charAt(j)!=say){
                    curr.append(count).append(say);
                    count=1;
                    say=prev.charAt(j);
                }
                else count++;
            }
            curr.append(count).append(say);
        }
        return curr.toString();

    }
    public String countAndSay6(int n) {
        if (n == 0) return "";
        if (n == 1) return "1";
        String ans = "1";
        for (int i = 0; i < n - 1; i++) {
            StringBuilder sb = new StringBuilder();
            int index = 0;
            while (index < ans.length()) {
                char c = ans.charAt(index);
                int count = 1;
                while (index + 1 < ans.length() && ans.charAt(index + 1) == c) {
                    index++;
                    count++;
                }
                sb.append(count);
                sb.append(c);
                index++;
            }
            ans = sb.toString();
        }
        return ans;
    }
    public String countAndSay7(int n) {
        int count = 1;
        StringBuilder prev = new StringBuilder("1");
        for (int i = 1; i < n; i++) {
            StringBuilder curr = new StringBuilder();
            for (int j = 1; j <= prev.length(); j++) {
                if (j != prev.length() && prev.charAt(j) == prev.charAt(j - 1)) count++;
                else {
                    curr.append(count);
                    curr.append(prev.charAt(j - 1));
                    count = 1;
                }
            }
            prev = curr;
        }
        return prev.toString();
    }
    public String countAndSay8(int n) {
        List<Byte> word = Arrays.asList((byte) 1);
        for (int i = 2; i <= n; i++) {
            word = countAndSay(word);
        }
        return asString(word);
    }

    private static List<Byte> countAndSay(List<Byte> previous) {
        List<Byte> result = new ArrayList<>(previous.size() * 2);
        Byte current = previous.get(0);
        byte count = 1;
        for (int i = 1; i < previous.size(); i++) {
            var next = previous.get(i);
            if (next.equals(current)) {
                count += 1;
                continue;
            }
            result.add(count);
            result.add(current);
            current = next;
            count = 1;
        }
        result.add(count);
        result.add(current);
        return result;
    }

    private static String asString(List<Byte> word) {
        return word.stream()
                .map(String::valueOf)
                .collect(joining(""));
    }
    public String countAndSay9(int n) {
        String s ="1";
        for (int j=1; j < n; j++) {
            char prev = ' ';
            int count = 0;
            StringBuilder sb = new StringBuilder();
            for (int i = 0 ; i < s.length(); i++) {
                if (i==0) {
                    prev = s.charAt(i);
                    count = 1;
                    continue;
                }
                if (prev != s.charAt(i)) {
                    sb.append(count);
                    sb.append(prev);
                    prev = s.charAt(i);
                    count = 1;
                } else {
                    count++;
                }
            }
            sb.append(count);
            sb.append(prev);
            s = sb.toString();
        }
        return s;
    }
    public String countAndSay10(int n) {
        if (n == 0) return "";

        Queue<Integer> queue = new LinkedList<>();
        queue.offer(1);
        String result = "";

        for(int i = 1; i < n; i++) {
            int lastIndex = queue.peek();
            int count = 0;
            int size = queue.size();
            while(size != 0) {
                int curt = queue.poll();
                if(curt == lastIndex) count++;
                else {
                    queue.offer(count);
                    count = 1;
                    queue.offer(lastIndex);
                    lastIndex = curt;
                }
                size--;
            }

            queue.offer(count);
            queue.offer(lastIndex);

        }
        while(!queue.isEmpty()) result += queue.poll();
        return result;
    }
    public String countAndSay11(int n) {
        StringBuilder curr=new StringBuilder("1");
        StringBuilder prev;
        int count;
        char say;
        for (int i=1;i<n;i++){
            prev=curr;
            curr=new StringBuilder();
            count=1;
            say=prev.charAt(0);

            for (int j=1,len=prev.length();j<len;j++){
                if (prev.charAt(j)!=say){
                    curr.append(count).append(say);
                    count=1;
                    say=prev.charAt(j);
                }
                else count++;
            }
            curr.append(count).append(say);
        }
        return curr.toString();

    }
    public String countAndSay12(int n) {
        Map<Integer,String> maps = new HashMap<Integer,String>();
        maps.put(1,"1");
        for(int i = 2; i<=n; i++){
            String input = maps.get(i-1);
            String value = process( input.toString() );
            maps.put(i, value);
        }

        // System.out.println( "2 "+process( "1" ));  // 3
        // System.out.println( "3 "+process( "11" ));  // 3
        // System.out.println("4 "+ process( "21" ));  // 4
        //  System.out.println("5 "+ process( "1211" )); // 5

        return maps.get(n);
    }
    public String countAndSay13(int n) {
        if(n == 1){
            return "1";
        }
        String subAns = countAndSay13(n-1);

        return breakAndCreate(subAns);
    }
    public String breakAndCreate(String s){
        int count = 1;
        StringBuilder sb = new StringBuilder();
        for(int i = 1;i < s.length();i++){
            if(s.charAt(i) != s.charAt(i-1)){
                sb.append(count + ""+ s.charAt(i-1));
                count = 0;
            }
            count++;
        }
        sb.append(count +""+ s.charAt(s.length() - 1));
        return sb.toString();
    }

    private String process(String s){
        char[] chs = s.toCharArray();
        int count = 1;
        char ch = chs[0];
        StringBuilder sb = new StringBuilder();
        for(int i=1; i<=chs.length; i++){
            if(i==chs.length){
                sb.append(count+""+ch);
                continue;
            }

            if(chs[i] == ch){
                count ++;
            }else {
                sb.append(count+""+ch);
                count = 1;
                ch = chs[i];
            }
        }

        return sb.toString();
    }
    public static String countAndSay14(int n) {
        if(n==1) return "1";
        if(n==2) return "11";

        String[]arr=new String[n+1];
        arr[1]="1";
        arr[2]="11";

        process(n,arr);
        return arr[n];

    }

    private static String process(int n,String[]arr){
        if(arr[n]!=null) return arr[n];

        String pre=process(n-1,arr);

        int count=1;
        char temp=pre.charAt(0);
        String ans="";

        for (int i=1;i<=pre.length();i++){
            while (i<pre.length() && pre.charAt(i)==temp){
                count++;
                i++;
            }
            ans+=String.valueOf(count);
            ans+=String.valueOf(temp);

            if(i<pre.length()){
                count=1;
                temp=pre.charAt(i);
            }
        }
        arr[n]=ans;
        return ans;
    }
    public String countAndSay15(int n) {
        if (n <= 0) {
            throw new IllegalArgumentException("Invalid Input");
        }

        StringBuilder sb = new StringBuilder().append(1);
        while (--n > 0) {
            StringBuilder next = new StringBuilder();
            char c = sb.charAt(0);
            int count = 1;
            for (int i=1; i<sb.length(); i++) {
                if (sb.charAt(i) == c) {
                    count++;
                } else {
                    next.append(count).append(c);
                    count = 1;
                    c = sb.charAt(i);
                }
            }
            next.append(count).append(c);
            sb = next;
        }

        return sb.toString();
    }
    public String countAndSay16(int n) {
        String s = "1";
        if (n == 1) {
            return s;
        }
        for (int i = 2; i <= n; i++) {
            s = helper(s);
        }
        return s;
    }

    private String helper(String s){
        int count = 1;
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < s.length(); i++) {
            if (i == s.length() - 1) {
                sb.append(count);
                sb.append(s.charAt(i));
            } else if (s.charAt(i) == s.charAt(i + 1)) {
                count++;
            } else {
                sb.append(count);
                sb.append(s.charAt(i));
                count = 1;
            }
        }
        return sb.toString();
    }
    public String countAndSay17(int n) {
        return recurse(n - 1, "1");
    }

    public String recurse(int n, String s) {
        if (n == 0) {
            return s;
        }

        char[] arr = s.toCharArray();
        char prev = arr[0];
        int count = 1;
        StringBuilder sb = new StringBuilder();
        for (int i = 1; i < arr.length; i++) {
            char c = arr[i];
            if (c == prev) {
                count++;
            } else {
                sb.append(count);
                sb.append(prev);
                prev = c;
                count = 1;
            }
        }
        sb.append(count);
        sb.append(prev);
        return recurse(n - 1, sb.toString());
    }
    public String countAndSay18(int n) {
        if(n == 1) return "1";
        StringBuilder sb = new StringBuilder("1");
        int index = 1;
        while(++index <= n) {
            char prev = sb.toString().charAt(0);
            int count = 0;
            StringBuilder newSb = new StringBuilder();
            for(char c : sb.toString().toCharArray()) {
                if(c == prev) {
                    count++;
                } else {
                    newSb.append(count);
                    newSb.append(prev);
                    prev = c;
                    count = 1;
                }
            }
            newSb.append(count);
            newSb.append(prev);
            sb = newSb;
        }

        return sb.toString();
    }
    public String countAndSay19(int n) {
        String prev = "1";
        if(n==1){
            return prev;
        }
        for(int i=2; i<=n; i++){
            StringBuilder sb = new StringBuilder();
            //int p = prev.charAt(0);
            int j = 0;

            while(j<prev.length()){
                int count = 1;
                while(j<prev.length()-1 && prev.charAt(j) == prev.charAt(j+1)){
                    count++;
                    j++;
                }
                sb.append(count);
                sb.append(prev.charAt(j));
                j++;

            }
            prev = sb.toString();
        }
        return prev;
    }
    public String countAndSay20(int n) {

        String s = "1";
        if(n==1) return s;
        for(int i = 2 ; i <= n; i++){
            s = getString(s);
        }
        return s;
    }

    public String getString(String str){

        StringBuilder ans = new StringBuilder();
        char cur = str.charAt(0);
        int cnt = 1;
        for(int i=1; i< str.length(); i++){
            if(cur==str.charAt(i)){
                cnt++;
                continue;
            }
            else{
                ans = ans.append(cnt);
                ans = ans.append(cur);
                cnt = 1;
                cur = str.charAt(i);
            }
        }
        ans = ans.append(cnt);
        ans = ans.append(cur);
        return ans.toString();

    }
    public String countAndSay21(int n) {
        if (n == 1)
            return "1";
        if (n == 2)
            return "11";

        String str = "21";
        for(int i = 4; i <= n; i++){
            String temp = "";
            str += "$";
            int count = 1;
            for(int j = 1; j < str.length(); j++){
                if(str.charAt(j) != str.charAt(j-1)){
                    temp += String.valueOf(count);
                    temp += str.charAt(j-1);
                    count = 1;
                } else {
                    count++;
                }
            }
            str = temp;
        }

        return str;
    }
    public String countAndSay22(int n) {
        String currentString = "1";
        for (int i = 2; i <= n; i++) {
            String nextString = "";
            for (int j = 0, k = 0; j < currentString.length(); j = k) {
                while (k < currentString.length() && currentString.charAt(k) == currentString.charAt(j)) k++;
                nextString += Integer.toString(k - j) + currentString.charAt(j);
            }
            currentString = nextString;
        }

        return currentString;
    }
    public String countAndSay23(int n) {
        Map<String, String> dp = new HashMap<>();
        dp.put("1", "11");

        String s = "1";
        String newS;
        for( int i = 1; i < n; i++ ) {
            newS = "";

            int st = 0;
            int en;
            char[] chars = s.toCharArray();
            while( st < chars.length ) {
                en = st;
                while( en < chars.length - 1 ) {
                    if ( chars[en] == chars[en + 1] ) {
                        en++;
                    } else {
                        break;
                    }
                }

                newS += getString( chars, st, en, dp );
                st = en + 1;
            }

            s = newS;
        }

        return s;
    }

    public String getString( char[] chars, int st, int en, Map<String, String> dp ) {
        int count = en - st + 1;
        String str = new String( chars, st, count );

        if ( dp.containsKey( str ) ) {
            return dp.get( str );
        }

        String answer = "" + count + chars[st];
        dp.put( str, answer );

        return answer;
    }
}
